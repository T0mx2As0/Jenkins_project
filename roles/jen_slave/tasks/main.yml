- name: Include variables
  include_vars: "../../../inventory/vars.yml"

- name: Pull jenkins slave image
  containers.podman.podman_image:
      name: docker.io/docker:dind
      state: present

- name: start jenkins slave container #aggiungere hostname
  containers.podman.podman_container:
      name: "{{Hostname_Slave}}"
      image: docker.io/docker:dind
      state: started
      interactive: true
      privileged: true 
      restart_policy: always
      network: podman_internal
      ip: "{{IP_slave}}"
      cap_add:
       - NET_RAW

- name: Install some packeges inside container
  containers.podman.podman_container_exec:
    name: "{{Hostname_Slave}}"
    command: /bin/sh -c "apk update &> /dev/null && apk add openjdk17 vim curl jq --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community  &> /dev/null"

- name: Download jenkins slave packet
  containers.podman.podman_container_exec:
    name: "{{Hostname_Slave}}"
    command: /bin/sh -c " curl --insecure -O "{{url_jenkins}}"/jnlpJars/agent.jar"

- name: Take Pass
  containers.podman.podman_container_exec:
    name: jenkins_master
    command: /bin/bash -c "cat /var/jenkins_home/secrets/initialAdminPassword"
  register: pass_admin

- name: copy config.xml
  copy:
    src: ../file/node/config.xml
    dest: /home/vagrant

- name: Custom config.xml
  shell:
    cmd: sed -i 's/NodoTest/{{Hostname_Slave}}/g' /home/vagrant/config.xml

- name: Download cli.jar
  get_url:
    url: "{{url_jenkins}}/jnlpJars/jenkins-cli.jar"
    dest: /home/vagrant/

# - name: Add slave node
#   shell:
#        cmd: cat config.xml | java -jar jenkins-cli.jar -s {{url_jenkins}} -auth {{user_admin}}:{{pass_admin.stdout_lines[0]}} create-node {{Hostname_Slave}}
#        chdir: /home/vagrant/

# - name: Get secret file
#   shell:
#     cmd: curl -u "{{user_admin}}":"{{pass_admin.stdout_lines[0]}}" -O "{{url_jenkins}}"/computer/"{{Hostname_Slave}}"/slave-agent.jnlp
#     chdir: /home/vagrant/

# - name: Get secret
#   shell:
#     cmd: grep -oP '(?<=<argument>)[a-f0-9]{64}(?=</argument>)' slave-agent.jnlp
#     chdir: /home/vagrant/
#   register: secret

# - name: Start slave node
#   containers.podman.podman_container_exec:
#     name: "{{Hostname_Slave}}"
#     command: /bin/sh -c "java -jar agent.jar -url {{url_jenkins}} -secret {{secret.stdout_lines[0]}} -name {{Hostname_Slave}} -webSocket"
#     detach: true

- name: Install plugin
  jenkins_plugin:
    name: docker-pipeline
    url_username: "{{user_admin}}"
    url_password: "{{pass_admin.stdout_lines[0]}}"
    url: "{{url_jenkins}}"

- name: Create a jenkins job using basic authentication
  community.general.jenkins_job:
    config: "{{ lookup('file', 'file/job/config.xml') }}"
    name: flask-app-example-build_Ansible
    password: "{{pass_admin.stdout_lines[0]}}"
    user: admin
    url: "{{url_jenkins}}"

# - name: Download Minikube
#   containers.podman.podman_container_exec:
#     name: "{{Hostname_Slave}}"
#     command: /bin/sh -c "curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-arm64"

# - name: Install Minikube
#   containers.podman.podman_container_exec:
#     name: "{{Hostname_Slave}}"
#     command: /bin/sh -c "install minikube-linux-arm64 /usr/local/bin/minikube && rm minikube-linux-arm64"

# - name: Install Minikube
#   containers.podman.podman_container_exec:
#     name: "{{Hostname_Slave}}"
#     command: /bin/sh -c "minikube start --force"

# - name: Download Helm
#   containers.podman.podman_container_exec:
#     name: "{{Hostname_Slave}}"
#     command: /bin/sh -c "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"

# - name: Install Helm
#   containers.podman.podman_container_exec:
#     name: "{{Hostname_Slave}}"
#     command: /bin/sh -c "chmod 700 get_helm.sh && sh get_helm.sh"